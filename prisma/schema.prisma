generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String       @unique
  password        String?
  accountVerified DateTime?
  history         History[]
  accounts        Account[]
  playlists       PlayList[]
  likedSongs      LikedSongs[]
  followingIds    String[]     @db.ObjectId
  following       Artist[]     @relation(fields: [followingIds], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.ObjectId
  access_token      String? @db.ObjectId
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.ObjectId
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Album {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  image   String
  color   String
  release DateTime
  songs   Song[]

  @@unique([id, image])
  @@index([name])
}

model Song {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  image     String
  url       String
  duration  Int
  albumId   String   @db.ObjectId
  album     Album    @relation(fields: [albumId], references: [id])
  artistIds String[] @db.ObjectId
  artists   Artist[] @relation(fields: [artistIds], references: [id])

  @@index([albumId, name])
}

model LikedSongs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  songId    String   @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([songId, userId])
  @@index([userId])
}

model Artist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  image       String
  thumbnail   String?
  about       String   @db.String
  songIds     String[] @db.ObjectId
  songs       Song[]   @relation(fields: [songIds], references: [id])
  followerIds String[] @db.ObjectId
  followers   User[]   @relation(fields: [followerIds], references: [id])

  @@index([name])
}

model PlayList {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  image       String?
  description String?
  color String?
  userId      String         @db.ObjectId
  private     Boolean        @default(true)
  user        User           @relation(fields: [userId], references: [id])
  songs       PlaylistSong[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([userId, name])
}

model PlaylistSong {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  songId     String   @db.ObjectId
  playlistId String   @db.ObjectId
  playlist   PlayList @relation(fields: [playlistId], references: [id], onDelete : Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([songId, playlistId])
}

model History {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  contentId String   @db.ObjectId
  isAlbum   Boolean  @default(false)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model SongPlays {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  songId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([songId, userId])
}

model Genre {
  id    String      @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  image String
  songs GenreSong[]
  remix Remix[]
}

model Remix {
  id      String      @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  image   String
  songs   RemixSong[]
  genreId String      @db.ObjectId
  genre   Genre       @relation(fields: [genreId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GenreSong {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  songId    String   @db.ObjectId
  genreId   String   @db.ObjectId
  genre     Genre    @relation(fields: [genreId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([genreId])
}

model RemixSong {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  songId    String   @db.ObjectId
  remixId   String   @db.ObjectId
  remix     Remix    @relation(fields: [remixId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([remixId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  token   String
  expires DateTime
  email   String

  @@index([email])
}

model ForgetPasswordToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  token   String
  expires DateTime
  email   String

  @@index([email])
}
